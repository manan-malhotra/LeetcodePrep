package Trees;
import java.util.*;
 class Node{
	Node left;
	Node right;
	int value;
	public Node(int value){
		this.value = value;
	}
}
public class CTJ7908 {
	static int max = 0;
	public static void main(String[] args){
		// Scanner sc = new Scanner(System.in);
		// int n = sc.nextInt();
		// int[] arr = new int[n];
		// for(int i=0;i<n;i++){
		// 	arr[i] = sc.nextInt();
		// }
        // String[] a = "-375 122 231 93 -785 673 -378 516 359 -413 646 981 318 949 -755 -918 468 -418 -164 -728 -203 -360 441 579 -774 -522 146 -115 941 -127 -921 -794 986 -50 -61 841 -385 552 -3 966 779 -365 587 89 -776 471 -190 684 693 638 595 -518 917 28 -948 -865 146 -162 12 -273 703 83 -76 681 672 503 162 -721 -305 -849 884 -887 -574 463 194 -359 -426 644 965 -742 -79 200 -268 -170 -780 -576 -395 357 254 609 -924 -52 -668 -360 -731 996 782 422 914 -531 213 438 -426 630 -459 407 911 106 -309 516 356 252 -293 728 722 -433 -857 -681 564 389 568 279 977 891 911 -763 527 333 299 81 441 -848 -489 655 422 43 -298 325 789 384 -520 137 -724 179 -495 989 738 -360 -700 293 668 859 -788 285 390 763 162 -443 87 -547 629 -480 -756 780 -833 658 -185 -492 -26 -756 884 94 21 -848 -735 517 781 643 -851 -928 -424 457 571 -220 -267 -399 -466 887 150 613 979 -229 773 -785 -810 580 865 -3 -920 -521 232 604 565 -755 395 470 402 168 104 190 -120 320 -361 -909 -909 12 -316 -735 -462 825 518 -491 -764 283 -636 -582 -497 869 54 -778 -661 926 466 544 811 -499 -347 204 660 397 -614 -820 -291 -335 -738 -560 668 -414 -303 -802 -597 -793 -653 -722 130 -297 -312 272 -436 382 486 -457 300 -408 726 -250 84 -629 946 -616 408 972 -444 -891 -371 -542 -460 937 35 -123 -873 78 75 -886 348 845 -191 -973 109 12 49 -765 195 -660 -182 -87 82 542 -76 -332 918 -676 -368 -534 -928 -99 -437 -748 -171 590 121 -404 -340 836 -651 999 672 -202 666 -579 802 -293 -705 -364 -313 -247 189 409 -713 -896 -931 -803 -932 -659 -697 780 -119 -142 -976 350 -912 -216 586 -261 -388 927 -622 924 -284 -964 -664 -842 -617 -377 -214 -291 368 966 -890 295 710 818 484 418 799 427 189 -328 -724 -147 -986 1004 629 239 -265 -768 158 -247 -852 866 -571 -876 -985 -197 -613 -559 504 395 -953 254 -318 749 64 806 -194 -498 224 987 166 140 -520 -181 136 -900 -950 510 972 200 -745 760 -295 -325 875 -640 118 -746 -559 -738 640 -521 508 962 -780 -789 759 18 -295 -25 -355 511 755 116 -678 -117 -144 -988 -967 -180 -149 -721 -428 548 -406 -913 548 704 980 981 958 260 -548 106 214 -689 309 -35 -31 1006 580 605 508 327 -639 470 849 -143 473 874 669 -684 793 881 504 -621 959 44 723 579 -335 673 -169 108 -230 -963 59 719 -359 -980 716 -787 265 -136 179 618 -674 -332 -533 439 -818 776 747 966 648 -109 985 247 927 699 -182 -417 12 641 331 774 318 -618 484 951 -606 -160 803 650 696 -378 -92 662 282 14 92 456 -570 -521 62 718 361 38 -43 -72 -623 415 151 381 -304 -878 -206 653 -504 918 596 -471 -602 39 819 734 653 -633 388 -425 21 -880 670 442 -762 -276 152 591 402 748 -841 771 -197 -51 -209 490 63 225 135 550 135 -629 719 525 401 530 251 -306 537 -721 -92 -451 -610 -430 983 -380 -66 -225 851 -673 -485 650 738 309 -409 -831 -561 645 386 214 -165 -839 577 -454 326 -382 716 -783 -49 -107 -513 851 434 -483 -939 57 -223 -13 471 -732 -46 978 910 -317 -73 -508 -508 6 777 869 -788 -396 670 428 -210 -13 -962 -854 196 -371 31 323 -528 -896 832 -475 -199 -751 151 -736 -491 -903 881 -942 -228 -552 -810 -97 445 959 -236 297 -797 -926 -283 -367 53 -606 -581 -760 15 90 203 126 186 26 291 978 -85 -566 882 415 -478 755 465 -66 -806 295 829 631 246 -767 -80 89 -702 276 714 -9 662 773 -129 -683 -145 -935 435 680 83 -283 298 990 -209 172 45 -47 -82 -850 878 104 437 347 -625 -677 219 -65 404 157 -797 -242 -860 505 -477 2 813 369 59 -112 41 782 245 -669 412 -973 143 -552 -28 -947 -762 -510 -203 666 476 -188 629 -313 738 24 836 581 774 968 -275 936 -390 -822 -55 661 58 978 435 -706 949 -514 961 84 -74 -427 -224 -196 54 565 -890 -478 -632 730 -151 746 -254 -675 -33 -840 -715 684 736 -114 854 -327 -813 -449 -357 261 -163 -768 739 -210 307 -695 355 -925 101 -951 280 202 -789 288 -76 -300 -326 310 17 632 110 293 -44 -163 819 -551 502 998 -8 784 -101 469 1008 -370 899 -45 -73 -106 -330 -981 -418 941 -139 -215 221 777 476 886 -273 -867 158 829 418 754 -342 -123 -805 -849 -486 -173 927 405 -712 575 -974 827 -479 -407 -288 183 -396 286 116 457 711 976 -126 -173 502 593 -49 -700 413 -991 -954 711 -475 -768 854 31 -301 421 -924 -374 -13 742 -555 148 -674 -203 -677 -78 723 78 -982 425 -306 -468 892 -812 -884 -517 -520 169 -517 -482 -128 -352 -610 -635 671 80 426 387 698 -947 120 783 193 438 -429 155 1000 -714 -775 658 351 -89 -819 -118 -261 937 357 -141 98 480 369 610 -880 398 615 431 -882 32 -191 456 77 921 231 909 351 442 56 -9 367 273 -360 -290 824 -187 232 -797 -258 -420 54 480 700 -585 -270 811 453 -664 234 563 8".split(" ");
        //String[] a = "880 841 14 584 -162 -48 3 757 794 650 -203 -178 -337 -30 -312 -135 947 -245 493 111 430 423 -404 -118 -127 953 -359 2 502 420 244 501 285 839 204 704 -184 693 580 -365 462 864 38 612 -47 306 -405 -75 642 575 616 97 116 699 465 476 771 687 965 392 132 234 -83 904 191 702 727 494 514 332 709 94 315 -228 -269 754 659 -93 -202 325 -400 -467 909 203 719 493 -202 514 205 -212 -69 823 603 429 846 -181 249 597 893 -212 48 721 369 849 -388 680 722 757 -294 -361 107 -113 -342 135 671 958 -348 956 591 344 -137 -360 286 952 556 156 -110 -76 -128 -98 292 501 -352 -220 469 -254 -421 216 -378 -229 435 216 239 580 932 -66 563 -391 -85 178 533 264 399 -62 335 74 675 806 484 -428 -268 -199 653 -39 68 147 194 227 849 397 485 403 -268 -251 8 -312 264 -310 -216 665 449 898 48 -127 -140 964 433 -440 795 -58 -288 -448 324 852 93 973 24 774 225 -8 195 -171 882 414 158 9 683 909 185 -415 693 -247 970 -140 112 -51 -151 -336 89 -332 187 288 -199 -464 259 381 -372 864 273 433 -120 -413 843 -119 582 120 470 289 53 -226 361 -135 14 450 211 707 885 641 858 -1 796 70 868 -285 187 152 583 395 41 -25 -147 502 49 -185 963 -251 421 458 525 -407 813 5 -55 -148 942 737 -417 946 402 -440 -30 317 116 -43 519 884 596 126 304 -245 682 738 838 -245 -423 826 -9 579 403 -365 659 241 127 -371 673 188 946 837 158 373 884 709 -285 119 -216 720 27 961 -35 912 -259 -328 768 -303 8 926 -358 580 530 531 702 214 -109 -52 424 -317 716 395 -455 -7 -113 -453 -179 88 153 92 -73 761 77 379 697 399 632 490 583 -242 441 711 825 90 361 645 791 833 -288 334 -460 915 -247 -334 -67 221 -300 334 796 339 913 -158 125 15 802 -59 900 458 -450 602 703 572 432 647 -313 -182 317 -403 -231 609 417 -204 549 751 43 -400 -3 229 421 -89 -313 359 240 393 954 66 820 973 -357 857 694 927 453 150 599 721 455 34 804 711 -332 246 -374 798 116 155 885 600 965 425 -370 -323 -98 356 557 -119 -459 496 -27 -329 471 -308 -377 43 329 803 -211 -98 -138 -382 -268 17 445 -156 -161 -414 580 -157 766 664 754 883 828 -319 358 504 143 386 24 603 638 -386 876 748 144 229 575 420 712 -444 618".split(" ");
        String[] a = "-619 3 -231 -665 117 -303 68 -2 -519 -667 -392 -115 -408 175 -593 -164 -656 -670 -626 -750 -663 -586 -505 -299 -668 -642 -240 -115 -163 -491 -553 182 18 180 -477 141 -309 -596 145 -56 -299 -433 -165 65 -252 -753 -94 -136 -459 52 77 -350 -529 -614 122 -425 -292 -112 -726 -449 169 -507 -454 1 -322 33 148 141 -557 107 90 107 -320 -261 -14 -759 -50 -102 69 -696 -45 152 -274 -760 -648 -146 -221".split(" ");
        
        int n = a.length;
        int arr[] = new int[n];
        for(int i=0;i<arr.length;i++){
            arr[i]= Integer.parseInt(a[i]);
        }
		Node root = new Node(arr[0]);
		buildTree(root,arr);
		int ans = getMax(root);
		System.out.println(max);
	}
	
	public static int getMax(Node root){
		if(root==null) return 0;
		int left = getMax(root.left);
		int right = getMax(root.right);
		int ll = Math.max(0,left);
		int rr = Math.max(0,right);
		max = Math.max(max,ll+rr+root.value);
		
		return Math.max(ll,rr) + root.value;
	}
	
	public static void buildTree(Node root, int[] arr){
		Queue<Node> q = new LinkedList<>();
		q.offer(root);
		int i = 1;
		while(i<arr.length){
			Node curr = q.poll();
			int num = arr[i];
			i++;
			curr.left = new Node(num);
			q.offer(curr.left);
			if(i<arr.length){
				num = arr[i];
				curr.right = new Node(num);
				q.offer(curr.right);
				i++;
			}
		}
	}
	
}